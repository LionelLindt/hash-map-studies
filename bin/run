#!/usr/bin/env ruby
require 'timeout'
require_relative '../lib/hash_map'
require_relative '../lib/optimizer_repository'

Dir['optimizers/**/*.rb'].sort.each { |f| require_relative "../#{f}" }

def with_each_sample
  %w[sentry_issues_first_seen numeric_keys goethe_words lawoon_commits passwords lawoon_typescript].each do |sample_name|
    # Attention the order is different in each run because of #shuffe. Use the RANDOM_SEED environment variable.
    sample_keys = File.read("data/#{sample_name}.txt").split(/\W+/).shuffle
    yield(sample_name, sample_keys)
  end
end

def try_experiment(hash_map, sample_keys)
  Timeout.timeout(60) do
    sample_keys.each { |key| hash_map[key] = :dummy_value }
  end

  raise 'Element has been lost in the nether' if sample_keys.one? { |key| hash_map[key].nil? }
rescue StandardError => e
  "! #{e.message}"
else
  x = hash_map.fill_level
  y = hash_map.total_collision_count / 2
  z = (1 - x/2) * (Math.sqrt(y) + 2)
  "#{z.round(2)} (#{y} collisions at #{x.round(5)} fill)"
end

seed = (ENV['RANDOM_SEED'] || Random.new_seed).to_i
Kernel.srand seed
puts "Initializing experiments with random seed #{seed}"

OptimizerRepository.all.each do |locator|
  strategy_report = "Strategy: #{locator[:name]}\n"

  with_each_sample do |sample_name, sample_keys|
    hash_map = HashMap.new.with_locator(&locator[:locator])
    experiment_report = try_experiment(hash_map, sample_keys)
    strategy_report << "  #{sample_name}: #{experiment_report}\n"
  end

  puts strategy_report
end
