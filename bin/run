#!/usr/bin/env ruby
require 'timeout'
require_relative '../lib/hash_map'
require_relative '../lib/optimizer_repository'

OptimizerRepository.register(
  'Based on key length (default)',
  proc { |key, collision_count| key.length + collision_count }
)
Dir['optimizers/**/*.rb'].sort.each { |f| require_relative "../#{f}" }

seed = ENV['RANDOM_SEED'].to_i || Random.new_seed
Kernel.srand seed
puts "Initializing experiment with random seed #{seed}"

OptimizerRepository.all.each do |locator|
  puts "Strategy: #{locator[:name]}"
  ['numeric_keys'].each do |sample_name|
    keys = File.read("spec/data/#{sample_name}.txt").split(/\W+/).shuffle

    hash_map = HashMap.new.with_locator(&locator[:locator])

    begin
      Timeout.timeout(60) do
        keys.each { |key| hash_map[key] = :value }
      end

      raise 'Element could not be found' if keys.one? { |key| hash_map[key].nil? }
    rescue StandardError => e
      puts "  #{sample_name}: ! #{e.message}"
    else
      puts "  #{sample_name}: #{hash_map.total_collision_count} collisions, #{hash_map.fill_level} fill"
    end
  end
end
